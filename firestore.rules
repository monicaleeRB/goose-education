rules_version = "2";

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isLoggedIn() {
      return request.auth != null;
    }

    function isOwner() {
      return isLoggedIn() && request.auth.uid == resource.data.authorID;
    }

    function isAdmin() {
      return isLoggedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }

    function contentIsValid() {
      return request.resource.data.keys().hasAll(["title", "description"]);
    }

    function personalInfoIsValid() {
      return request.resource.data.keys().hasAll(["address", "birthDate", "email", "emergencyContactNumber", "emergencyContactRelation", "firstName", "gender", "lastName", "phoneNumber"]);
    }

    function schoolInfoIsValid() {
      return personalInfoIsValid() && 
      request.resource.data.keys().hasAll(["programName", "schoolName", "startDate"]);
    }

    function homestayInfoIsValid() {
      return personalInfoIsValid() && 
      request.resource.data.keys().hasAll(["homestayStartDate", "homestayEndDate"]);
    }

    function airportRideInfoIsValid() {
      return personalInfoIsValid() &&
      request.resource.data.keys().hasAll(["arrivalFlightDate", "arrivalFlightName", "arrivalFlightTime", "departureFlightDate", "departureFlightName", "departureFlightTime"]);
    }
 
    match /aggregates/{aggregate} {
      allow read;
    }

    match /graphics/{graphic} {
      allow read;
      allow write: if isAdmin();
    } 

    match /schools/{school} {
      allow read;
      allow write: if isAdmin();
    }

    match /announcements/{announcement} {
      allow read;
      allow create: if isAdmin() && contentIsValid(); 
      allow update: if isLoggedIn();
      allow delete: if isAdmin();
    }

    match /tips/{tip} {
      allow read;
      allow create, update: if isAdmin() && contentIsValid(); 
      allow delete: if isAdmin();
    }

    match /users/{user} {
      allow read, create;
      allow update: if isLoggedIn() && request.auth.uid == user;
      allow delete: if isLoggedIn() && request.auth.uid == user || isAdmin();
    }

    match /articles/{article} {
      allow read;
      allow create: if isLoggedIn() && contentIsValid();
      allow update: if isLoggedIn();
      allow delete: if isAdmin() || isOwner();
    }

    match /messages/{message} {
      allow read;
      allow create: if isLoggedIn() && contentIsValid();
      allow update: if isLoggedIn();
      allow delete: if isAdmin() || isOwner();
    }

    match /airportRideApplications/{airportApplication} {
      allow read, delete: if isAdmin() || isOwner();
      allow create, update: if isLoggedIn() && airportRideInfoIsValid();
    }    

    match /homestayApplications/{homestayApplication} {
      allow read, delete: if isAdmin() || isOwner();
      allow create, update: if isLoggedIn() && homestayInfoIsValid();
    }    

    match /schoolApplications/{schoolApplication} {
      allow read, delete: if isAdmin() || isOwner();
      allow create, update: if isLoggedIn() && schoolInfoIsValid();
    }
  }
}